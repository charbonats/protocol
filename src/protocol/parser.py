"""protocol.parser module."""

from dataclasses import dataclass
from collections import deque
from enum import IntEnum, auto
from typing import Union


class ProtocolError(Exception):
    """Protocol error."""

    def __init__(self, message: str, bad_value: bytes) -> None:
        self.bad_value = bad_value
        super().__init__(message)


class State(IntEnum):
    OP_START = 0
    OP_PLUS = auto()
    OP_PLUS_O = auto()
    OP_PLUS_OK = auto()
    OP_MINUS = auto()
    OP_MINUS_E = auto()
    OP_MINUS_ER = auto()
    OP_MINUS_ERR = auto()
    OP_MINUS_ERR_SPC = auto()
    MINUS_ERR_ARG = auto()
    OP_M = auto()
    OP_MS = auto()
    OP_MSG = auto()
    OP_MSG_SPC = auto()
    MSG_ARG = auto()
    MSG_PAYLOAD = auto()
    MSG_END = auto()
    OP_H = auto()
    OP_P = auto()
    OP_PI = auto()
    OP_PIN = auto()
    OP_PING = auto()
    OP_PO = auto()
    OP_PON = auto()
    OP_PONG = auto()
    OP_I = auto()
    OP_IN = auto()
    OP_INF = auto()
    OP_INFO = auto()
    OP_INFO_SPC = auto()
    INFO_ARG = auto()
    OP_END = auto()


class Character(IntEnum):
    # +/-
    plus = ord("+")
    minus = ord("-")
    # ok
    o = ord("o")
    O = ord("O")
    k = ord("k")
    K = ord("K")
    # err
    e = ord("e")
    E = ord("E")
    r = ord("r")
    R = ord("R")
    # pub
    p = ord("p")
    P = ord("P")
    u = ord("u")
    U = ord("U")
    b = ord("b")
    B = ord("B")
    # sub
    s = ord("s")
    S = ord("S")
    # hpub
    h = ord("h")
    H = ord("H")
    # msg
    m = ord("m")
    M = ord("M")
    g = ord("g")
    G = ord("G")
    # ping
    i = ord("i")
    I = ord("I")
    n = ord("n")
    N = ord("N")
    # info
    f = ord("f")
    F = ord("F")
    # special characters
    space = ord(" ")
    newline = ord("\n")
    carriage_return = ord("\r")


class Operation(IntEnum):
    OK = 0
    ERR = auto()
    MSG = auto()
    HMSG = auto()
    INFO = auto()
    PING = auto()
    PONG = auto()


@dataclass
class Event:
    """NATS Protocol event."""

    operation: Operation


class Parser:
    """NATS Protocol parser."""

    def __init__(self, history: int = 0) -> None:
        if history < -1:
            raise ValueError(
                "history must be -1, 0 or a positive integer. "
                "-1 means unlimited history. "
                "0 means no history. "
                "A positive integer means the maximum number of states to keep in history excluding the current state."
            )
        # Initialize the parser history.
        self._history: deque[State] = deque(
            maxlen=history + 1 if history >= 0 else None
        )
        self._events: list[Event] = []
        # Initialize the parser state.
        self._history.append(State.OP_START)

    def history(self) -> list[State]:
        """Return the history of states."""
        return list(self._history)

    def state(self) -> State:
        """Return the current state of the parser."""
        return self._history[-1]

    def events(self) -> list[Event]:
        """Pop and return the events generated by the parser."""
        events = self._events
        self._events = []
        return events

    def parse(self, data: bytes) -> None:
        """Parse some bytes."""

        for idx in range(len(data)):
            value = data[idx]
            state = self._history[-1]
            if state == State.OP_START:
                if value == Character.p or value == Character.P:
                    self._history.append(State.OP_P)
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)

            elif state == State.OP_P:
                if value == Character.i or value == Character.I:
                    self._history.append(State.OP_PI)
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)

            elif state == State.OP_PI:
                if value == Character.n or value == Character.N:
                    self._history.append(State.OP_PIN)
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)

            elif state == State.OP_PIN:
                if value == Character.g or value == Character.G:
                    self._history.append(State.OP_PING)
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)

            elif state == State.OP_PING:
                if value == Character.carriage_return:
                    self._history.append(State.OP_END)
                    self._events.append(Event(Operation.PING))
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)

            elif state == State.OP_END:
                if value == Character.newline:
                    self._history.append(State.OP_START)
                    continue
                raise ProtocolError(f"unexpected byte: {value}", bad_value=data)
