"""protocol.parser module."""

from collections import deque
from dataclasses import dataclass
from enum import IntEnum, auto


class ProtocolError(Exception):
    """Protocol error."""

    def __init__(self, invalid_byte: int, bad_value: bytes) -> None:
        self.bad_value = bad_value
        super().__init__(f"unexpected byte: {bytes([invalid_byte])}")


class State(IntEnum):
    OP_START = 0
    OP_PLUS = auto()
    OP_PLUS_O = auto()
    OP_PLUS_OK = auto()
    OP_MINUS = auto()
    OP_MINUS_E = auto()
    OP_MINUS_ER = auto()
    OP_MINUS_ERR = auto()
    OP_MINUS_ERR_SPC = auto()
    MINUS_ERR_ARG = auto()
    OP_M = auto()
    OP_MS = auto()
    OP_MSG = auto()
    OP_MSG_SPC = auto()
    MSG_ARG = auto()
    MSG_PAYLOAD = auto()
    MSG_END = auto()
    OP_H = auto()
    OP_P = auto()
    OP_PI = auto()
    OP_PIN = auto()
    OP_PING = auto()
    OP_PO = auto()
    OP_PON = auto()
    OP_PONG = auto()
    OP_I = auto()
    OP_IN = auto()
    OP_INF = auto()
    OP_INFO = auto()
    OP_INFO_SPC = auto()
    INFO_ARG = auto()
    OP_END = auto()


class Character(IntEnum):
    # +/-
    plus = ord("+")
    minus = ord("-")
    # ok
    o = ord("o")
    O = ord("O")
    k = ord("k")
    K = ord("K")
    # err
    e = ord("e")
    E = ord("E")
    r = ord("r")
    R = ord("R")
    # pub
    p = ord("p")
    P = ord("P")
    u = ord("u")
    U = ord("U")
    b = ord("b")
    B = ord("B")
    # sub
    s = ord("s")
    S = ord("S")
    # hpub
    h = ord("h")
    H = ord("H")
    # msg
    m = ord("m")
    M = ord("M")
    g = ord("g")
    G = ord("G")
    # ping
    i = ord("i")
    I = ord("I")
    n = ord("n")
    N = ord("N")
    # info
    f = ord("f")
    F = ord("F")
    # special characters
    space = ord(" ")
    newline = ord("\n")
    carriage_return = ord("\r")


class Operation(IntEnum):
    OK = 0
    ERR = auto()
    MSG = auto()
    HMSG = auto()
    INFO = auto()
    PING = auto()
    PONG = auto()


@dataclass
class Event:
    """NATS Protocol event."""

    operation: Operation


@dataclass
class ErrorEvent(Event):
    """NATS Protocol error event."""

    message: str


@dataclass
class MsgEvent(Event):
    """NATS Protocol message event."""

    sid: int
    subject: str
    reply_to: str
    payload_size: int
    payload: bytes


class Parser:
    """NATS Protocol parser."""

    def __init__(self, history: int = 0) -> None:
        if history < -1:
            raise ValueError(
                "history must be -1, 0 or a positive integer. "
                "-1 means unlimited history. "
                "0 means no history. "
                "A positive integer means the maximum number of states to keep in history excluding the current state."
            )
        # Initialize the parser history.
        self._history: deque[State] = deque(
            maxlen=history + 1 if history >= 0 else None
        )
        self._events: list[Event] = []
        self._error_message = ""
        # Raw fields
        self._msg_args = b""
        self._pending_msg: MsgEvent | None = None
        # Initialize the parser state.
        self._history.append(State.OP_START)

    def history(self) -> list[State]:
        """Return the history of states."""
        return list(self._history)

    def state(self) -> State:
        """Return the current state of the parser."""
        return self._history[-1]

    def events(self) -> list[Event]:
        """Pop and return the events generated by the parser."""
        events = self._events
        self._events = []
        return events

    def parse(self, data: bytes) -> None:
        """Parse some bytes."""

        while data:
            value = data[0]
            data = data[1:]
            state = self._history[-1]

            if state == State.OP_START:
                if value == Character.m or value == Character.M:
                    self._history.append(State.OP_M)
                elif value == Character.p or value == Character.P:
                    self._history.append(State.OP_P)
                elif value == Character.plus:
                    self._history.append(State.OP_PLUS)
                elif value == Character.minus:
                    self._history.append(State.OP_MINUS)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_M:
                if value == Character.s or value == Character.S:
                    self._history.append(State.OP_MS)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MS:
                if value == Character.g or value == Character.G:
                    self._history.append(State.OP_MSG)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MSG:
                if value == Character.space:
                    self._history.append(State.OP_MSG_SPC)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MSG_SPC:
                if value == Character.carriage_return:
                    raise ProtocolError(value, data)
                elif value == Character.newline:
                    raise ProtocolError(value, data)
                elif value == Character.space:
                    raise ProtocolError(value, data)
                else:
                    self._msg_args += bytes([value])
                    self._history.append(State.MSG_ARG)

            elif state == State.MSG_ARG:
                if value == Character.carriage_return:
                    self._history.append(State.MSG_END)
                    args = self._msg_args.decode("utf-8").split(" ")
                    nbargs = len(args)
                    if nbargs == 4:
                        subject, raw_sid, reply_to, raw_payload_size = args
                    elif nbargs == 3:
                        reply_to = ""
                        subject, raw_sid, raw_payload_size = args
                    else:
                        raise ProtocolError(value, data)
                    try:
                        sid = int(raw_sid)
                        payload_size = int(raw_payload_size)
                    except Exception as e:
                        raise ProtocolError(value, data) from e
                    self._pending_msg = MsgEvent(
                        Operation.MSG,
                        sid=sid,
                        subject=subject,
                        reply_to=reply_to,
                        payload_size=payload_size,
                        payload=b"",
                    )
                    self._msg_args = b""
                elif value == Character.newline:
                    raise ProtocolError(value, data)
                else:
                    self._msg_args += bytes([value])

            elif state == State.MSG_END:
                if value == Character.newline:
                    self._history.append(State.MSG_PAYLOAD)
                else:
                    raise ProtocolError(value, data)

            elif state == State.MSG_PAYLOAD:
                assert self._pending_msg is not None, "pending_msg is None"
                if len(data) >= self._pending_msg.payload_size + 1:
                    self._pending_msg.payload = (
                        bytes([value]) + data[: self._pending_msg.payload_size - 1]
                    )
                    data = data[self._pending_msg.payload_size - 1 :]
                    self._events.append(self._pending_msg)
                    if data[0] == Character.carriage_return:
                        data = data[1:]
                        self._history.append(State.OP_END)
                    else:
                        raise ProtocolError(value, data)
                    self._pending_msg = None
                else:
                    return

            elif state == State.OP_PLUS:
                if value == Character.o or value == Character.O:
                    self._history.append(State.OP_PLUS_O)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PLUS_O:
                if value == Character.k or value == Character.K:
                    self._history.append(State.OP_PLUS_OK)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PLUS_OK:
                if value == Character.carriage_return:
                    self._history.append(State.OP_END)
                    self._events.append(Event(Operation.OK))
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MINUS:
                if value == Character.e or value == Character.E:
                    self._history.append(State.OP_MINUS_E)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MINUS_E:
                if value == Character.r or value == Character.R:
                    self._history.append(State.OP_MINUS_ER)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MINUS_ER:
                if value == Character.r or value == Character.R:
                    self._history.append(State.OP_MINUS_ERR)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MINUS_ERR:
                if value == Character.space:
                    self._history.append(State.OP_MINUS_ERR_SPC)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_MINUS_ERR_SPC:
                if value == Character.carriage_return:
                    raise ProtocolError(value, data)
                elif value == Character.newline:
                    raise ProtocolError(value, data)
                else:
                    try:
                        self._error_message += chr(value)
                    except Exception:
                        raise ProtocolError(value, data)
                    self._history.append(State.MINUS_ERR_ARG)

            elif state == State.MINUS_ERR_ARG:
                if value == Character.carriage_return:
                    msg = self._error_message
                    self._history.append(State.OP_END)
                    self._events.append(ErrorEvent(Operation.ERR, msg))
                    self._error_message = ""
                elif value == Character.newline:
                    raise ProtocolError(value, data)
                else:
                    try:
                        self._error_message += chr(value)
                    except Exception:
                        raise ProtocolError(value, data)

            elif state == State.OP_P:
                if value == Character.i or value == Character.I:
                    self._history.append(State.OP_PI)
                elif value == Character.o or value == Character.O:
                    self._history.append(State.OP_PO)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PI:
                if value == Character.n or value == Character.N:
                    self._history.append(State.OP_PIN)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PIN:
                if value == Character.g or value == Character.G:
                    self._history.append(State.OP_PING)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PING:
                if value == Character.carriage_return:
                    self._history.append(State.OP_END)
                    self._events.append(Event(Operation.PING))
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PO:
                if value == Character.n or value == Character.N:
                    self._history.append(State.OP_PON)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PON:
                if value == Character.g or value == Character.G:
                    self._history.append(State.OP_PONG)
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_PONG:
                if value == Character.carriage_return:
                    self._history.append(State.OP_END)
                    self._events.append(Event(Operation.PONG))
                else:
                    raise ProtocolError(value, data)

            elif state == State.OP_END:
                if value == Character.newline:
                    self._history.append(State.OP_START)
                else:
                    raise ProtocolError(value, data)

            else:
                raise ProtocolError(value, data)
