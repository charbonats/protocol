[project]
name = "protocol"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Guillaume Charbonnier", email = "guillaume.charbonnier@araymond.com" },
]
dependencies = []
readme = "README.md"
requires-python = ">= 3.8"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "pytest>=8.1.1",
    "pyright>=1.1.359",
    "coverage>=7.4.4",
    'tomli; python_full_version<="3.11.0a6"',
    'exceptiongroup; python_full_version<="3.11.0a6"',
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/protocol"]

[tool.pyright]
pythonVersion = "3.10"
include = ["tests", "src"]
exclude = ["**/.venv", "**/node_modules", "**/__pycache__", ".git", "**/build"]
venv = ".venv"
venvPath = "."
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = "warning"

[tool.rye.scripts]
# Run test with coverage
test = { chain = ["__test", "__coverage-html"] }
# View coverage report
htmlcov = "python -m http.server 8080 --directory coverage-report"
# Automate pre-commit
pre = { chain = ["format", "lint", "test", "typecheck"] }
# Automate CI
ci-full = { chain = [
    "bootstrap",
    "lint",
    "formatcheck",
    "test",
    "typecheck",
    "bench",
] }
ci-lint = { chain = ["bootstrap", "lint"] }
ci-format = { chain = ["bootstrap", "formatcheck"] }
ci-test = { chain = ["bootstrap", "test"] }
ci-bench = { chain = ["bootstrap", "bench"] }
ci-typecheck = { chain = ["bootstrap", "typecheck"] }
# Automate project install
bootstrap = { chain = ["__install-project"] }
# Run pyright static type checker
typecheck = { cmd = "pyright", env = { PYRIGHT_PYTHON_FORCE_VERSION = "latest" } }
# Generate version file
version = "hatch --quiet build --hooks-only"
# Run linter
lint = "rye lint"
# Run formatter
format = "rye fmt"
formatcheck = "rye fmt --check"
# Run benchmarks
bench = { chain = [
    "__bench_ping_pong",
    "__bench_msg_hmsg",
    "__bench_msg_ping_pong_msg",
    "__bench_msg_ok_ping_msg_pong_msg_ok",
] }
# Clear cache
clear = { chain = ["__clear_pycache", "__clear_bench", "__clear_dist"] }
__clear_bench = "rm -rf ./bench"
__clear_pycache = "find . -type d -name __pycache__ -exec rm -rf {} +"
__clear_dist = "rm -rf ./dist"
# Private commands
__test = "coverage run --rcfile=pyproject.toml -m pytest -vvv"
__coverage-html = "coverage html"
__install-project = "rye sync --no-lock --force"
__bench_ping_pong = { chain = [
    "__bench_ping_pong_300",
    "__bench_ping_pong_310",
    "__bench_ping_pong_re",
] }
__bench_msg_hmsg = { chain = [
    "__bench_msg_hmsg_300",
    "__bench_msg_hmsg_310",
    "__bench_msg_hmsg_re",
] }
__bench_msg_ping_pong_msg = { chain = [
    "__bench_msg_ping_pong_msg_300",
    "__bench_msg_ping_pong_msg_310",
    "__bench_msg_ping_pong_msg_re",
] }
__bench_msg_ok_ping_msg_pong_msg_ok = { chain = [
    "__bench_msg_ok_ping_msg_pong_msg_ok_300",
    "__bench_msg_ok_ping_msg_pong_msg_ok_310",
    "__bench_msg_ok_ping_msg_pong_msg_ok_re",
] }
__bench_ping_pong_300 = "python -O -m benchmarks -s ping_pong -o bench -p 300"
__bench_ping_pong_310 = "python -O -m benchmarks -s ping_pong -o bench -p 310"
__bench_ping_pong_re = "python -O -m benchmarks -s ping_pong -o bench -p re"
__bench_msg_hmsg_300 = "python -O -m benchmarks -s msg_hmsg -o bench -p 300"
__bench_msg_hmsg_310 = "python -O -m benchmarks -s msg_hmsg -o bench -p 310"
__bench_msg_hmsg_re = "python -O -m benchmarks -s msg_hmsg -o bench -p re"
__bench_msg_ping_pong_msg_300 = "python -O -m benchmarks -s msg_ping_pong_msg -o bench -p 300"
__bench_msg_ping_pong_msg_310 = "python -O -m benchmarks -s msg_ping_pong_msg -o bench -p 310"
__bench_msg_ping_pong_msg_re = "python -O -m benchmarks -s msg_ping_pong_msg -o bench -p re"
__bench_msg_ok_ping_msg_pong_msg_ok_300 = "python -O -m benchmarks -s msg_ok_ping_msg_pong_msg_ok -o bench -p 300"
__bench_msg_ok_ping_msg_pong_msg_ok_310 = "python -O -m benchmarks -s msg_ok_ping_msg_pong_msg_ok -o bench -p 310"
__bench_msg_ok_ping_msg_pong_msg_ok_re = "python -O -m benchmarks -s msg_ok_ping_msg_pong_msg_ok -o bench -p re"

[tool.coverage.run]
source = ["src/protocol"]
branch = true
[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing type-only code:
    "if TYPE_CHECKING:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
[tool.coverage.html]
directory = "coverage-report"
